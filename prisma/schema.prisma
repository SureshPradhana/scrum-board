generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                       String  @id(map: "PK_Account") @default(uuid())
  userId                   String  @map("user_id")
  type                     String
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  refresh_token            String?
  access_token             String?
  expires_at               BigInt?
  refresh_token_expires_in BigInt?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "FK_Account_User")

  @@unique([provider, providerAccountId], map: "UQ_Account_provider")
  @@map("accounts")
}

model Session {
  id           String   @id(map: "PK_Session") @default(uuid())
  sessionToken String   @unique(map: "UQ_Session_token") @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "FK_Session_User")

  @@map("sessions")
}

model User {
  id            String        @id(map: "PK_User") @default(uuid())
  name          String?
  email         String?       @unique(map: "UQ_User_email")
  emailVerified DateTime?     @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  orgId         String?       @map("org_id")
  organization  Organization? @relation(fields: [orgId], references: [id], onDelete: SetNull, onUpdate: SetNull, map: "FK_User_Organization")
  issues        Issue[]
  comments      Comment[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique(map: "UQ_VerificationToken_token")
  expires    DateTime

  @@id([identifier, token], map: "PK_VerificationToken")
  @@index([identifier], map: "IDX_VerificationToken_identifier")
  @@index([token], map: "IDX_VerificationToken_token")
  @@map("verification_tokens")
}

model Organization {
  id        String    @id(map: "PK_Organization") @default(uuid())
  name      String
  domain    String    @unique(map: "UQ_Organization_domain")
  image     String?
  users     User[]
  boards    Board[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("organizations")
}

model Board {
  id           String       @id(map: "PK_Board") @default(uuid())
  name         String
  orgId        String       @map("org_id")
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade, map: "FK_Board_Organization")
  columns      Column[]

  @@map("boards")
}

model Column {
  id      Int     @id(map: "PK_Column") @default(autoincrement())
  name    String
  boardId String  @map("board_id")
  board   Board   @relation(fields: [boardId], references: [id], onDelete: Cascade, map: "FK_Column_Board")
  issues  Issue[]

  @@map("columns")
}

model Issue {
  id          Int          @id(map: "PK_Issue") @default(autoincrement())
  name        String
  description String?
  priority    String?
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  deletedAt   DateTime?    @map("deleted_at")
  columnId    Int          @map("column_id")
  column      Column       @relation(fields: [columnId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "FK_Issue_Column")
  assigneeId  String?      @map("assignee_id")
  assignee    User?        @relation(fields: [assigneeId], references: [id], onDelete: SetNull, onUpdate: Cascade, map: "FK_Issue_User")
  tags        TagOnIssue[]
  comments    Comment[]

  @@map("issues")
}

model TagOnIssue {
  issueId Int   @map("issue_id")
  issue   Issue @relation(fields: [issueId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "FK_TagOnIssue_Issue")
  tagId   Int   @map("tag_id")
  tag     Tag   @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "FK_TagOnIssue_Tag")

  @@id([issueId, tagId], map: "PK_TagsOnIssues")
  @@index([issueId], map: "IDX_VerificationToken_issue")
  @@index([tagId], map: "IDX_VerificationToken_tag")
  @@map("tags_on_issues")
}

model Tag {
  id     Int          @id(map: "PK_Tag") @default(autoincrement())
  label  String       @unique(map: "UQ_Tag_label")
  issues TagOnIssue[]

  @@map("tags")
}

model Comment {
  id        String    @id(map: "PK_Comment") @default(uuid())
  text      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  issueId   Int       @map("issue_id")
  issue     Issue     @relation(fields: [issueId], references: [id], onDelete: Cascade, map: "FK_Comment_Issue")
  userId    String    @map("user_id")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "FK_Comment_User")

  @@map("comments")
}
