generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                       String  @id(map: "PK_Account") @default(uuid())
  userId                   String  @map("user_id")
  type                     String
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  refresh_token            String?
  access_token             String?
  expires_at               BigInt?
  refresh_token_expires_in BigInt?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "FK_Account_User")

  @@unique([provider, providerAccountId], map: "UQ_Account_provider")
  @@map("accounts")
}

model Session {
  id           String   @id(map: "PK_Session") @default(uuid())
  sessionToken String   @unique(map: "UQ_Session_token") @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "FK_Session_User")

  @@map("sessions")
}

model User {
  id            String    @id(map: "PK_User") @default(uuid())
  name          String?
  email         String?   @unique(map: "UQ_User_email")
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique(map: "UQ_VerificationToken_token")
  expires    DateTime

  @@id([identifier, token], map: "PK_VerificationToken")
  @@index([identifier], map: "IDX_VerificationToken_identifier")
  @@index([token], map: "IDX_VerificationToken_token")
  @@map("verification_tokens")
}
